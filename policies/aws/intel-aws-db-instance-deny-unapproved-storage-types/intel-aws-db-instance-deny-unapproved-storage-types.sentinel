import "tfplan/v2" as tfplan
import "approved"
import "policy_summary"

param valid_actions default [
	["no-op"],
	["create"],
	["update"],
]

doc = {
	"allowed":   approved.aws.aws_db_instance.config,
	"category":  approved.aws.aws_db_instance.category,
	"error":     " is not an allowed storage type.",
	"file_name": "intel-aws-db-instance-deny-unapproved-storage-types.sentinel",
	"md_url":    approved.policies_url.aws,
	"parameter": "storage_type",
	"provider":  approved.aws.aws_db_instance.provider,
	"resource":  approved.aws.aws_db_instance.resource,
	"violation": approved.aws.aws_db_instance.violation,
}

// Filter resources by type
all_resources = filter tfplan.resource_changes as _, rc {
	rc.type is doc.resource and
		rc.mode is "managed" and
		rc.change.actions in valid_actions
}

// Filter resources that violate a given condition
violators = filter all_resources as _, r {
	r.change.after.storage_type else [] not in doc.allowed
}

// Build a summary report
summaryreport = {
	"name": doc.name,
	"violations": map violators as _, violation {
		{
			"name":    violation.name,
			"address": violation.address,
			"type":    violation.type,
			"message": violation.change.after.storage_type + doc.error,
		}
	},
}

main = rule {
	policy_summary.summary(summaryreport, doc)
}
